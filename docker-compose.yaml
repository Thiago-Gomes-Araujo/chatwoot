services:
  base: &base
    build:
      context: .
      dockerfile: ./docker/Dockerfile
      args:
        BUNDLE_WITHOUT: ''
        EXECJS_RUNTIME: 'Node'
        RAILS_ENV: 'production'
        RAILS_SERVE_STATIC_FILES: 'true'
    tty: true
    stdin_open: true
    env_file: .env

  rails:
    <<: *base
    build:
      context: .
      dockerfile: ./docker/dockerfiles/rails.Dockerfile
    image: chatwoot-rails:production
    volumes:
      - ./:/app:delegated
      - node_modules:/app/node_modules
      - packs:/app/public/packs
      - cache:/app/tmp/cache
      - bundle:/usr/local/bundle
    depends_on:
      - postgres
      - redis
      - sidekiq
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      RAILS_ENV: production
    entrypoint: docker/entrypoints/rails.sh
    command: ["bundle", "exec", "rails", "server", "-p", "3000", "-b", "0.0.0.0"]

  sidekiq:
    <<: *base
    image: chatwoot-rails:production
    volumes:
      - ./:/app:delegated
      - node_modules:/app/node_modules
      - packs:/app/public/packs
      - cache:/app/tmp/cache
      - bundle:/usr/local/bundle
    depends_on:
      - postgres
      - redis
    environment:
      NODE_ENV: production
      RAILS_ENV: production
    command: ["bundle", "exec", "sidekiq", "-C", "config/sidekiq.yml"]

  postgres:
    image: pgvector/pgvector:pg16
    restart: always
    ports:
      - "5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    env_file: .env
    environment:
      POSTGRES_DB: chatwoot
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  redis:
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    env_file: .env
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis:/data

volumes:
  postgres:
  redis:
  packs:
  node_modules:
  cache:
  bundle:
